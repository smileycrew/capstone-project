{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { fetchGrades } from \"../../services/gradeServices\";\nimport { postStudentToDatabase } from \"../../services/studentServices\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CreateStudent = ({\n  user,\n  createStudentToggle,\n  setCreateStudentToggle,\n  handleFetchCalls\n}) => {\n  _s();\n  const [grades, setGrades] = useState([]);\n  const [studentForm, setStudentForm] = useState({});\n  const handleCreateStudent = event => {\n    event.preventDefault();\n    const copy = {\n      ...studentForm,\n      userId: user.id,\n      studentCode: handleRandomNumber()\n    };\n    copy.gradeId = parseInt(copy.gradeId);\n    studentForm.firstName && studentForm.lastName && studentForm.gradeId ? postStudentToDatabase(copy).then(() => {\n      setCreateStudentToggle(false);\n      handleFetchCalls();\n    }) : window.alert(\"please complete all fields\");\n  };\n  const handleCreateFetchCalls = () => {\n    fetchGrades().then(data => {\n      setGrades(data);\n    });\n  };\n\n  // Generate a random number between 100,000 and 999,999\n  const handleRandomNumber = () => {\n    const min = 1000;\n    const max = 9999;\n    const randomOrderNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n    return randomOrderNumber;\n  };\n  useEffect(() => {\n    handleCreateFetchCalls();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"hi\"\n  }, void 0, false);\n};\n_s(CreateStudent, \"eU9IvGYRMTVY93qTZUZmJasbFLk=\");\n_c = CreateStudent;\nvar _c;\n$RefreshReg$(_c, \"CreateStudent\");","map":{"version":3,"names":["useEffect","useState","fetchGrades","postStudentToDatabase","Fragment","_Fragment","jsxDEV","_jsxDEV","CreateStudent","user","createStudentToggle","setCreateStudentToggle","handleFetchCalls","_s","grades","setGrades","studentForm","setStudentForm","handleCreateStudent","event","preventDefault","copy","userId","id","studentCode","handleRandomNumber","gradeId","parseInt","firstName","lastName","then","window","alert","handleCreateFetchCalls","data","min","max","randomOrderNumber","Math","floor","random","children","_c","$RefreshReg$"],"sources":["/Users/edwin.moz/workspace/capstone-project/src/ParentViews/forms/CreateStudent.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { fetchGrades } from \"../../services/gradeServices\"\nimport { postStudentToDatabase } from \"../../services/studentServices\"\n\nexport const CreateStudent = ({ user, createStudentToggle, setCreateStudentToggle, handleFetchCalls }) => {\n\n    const [grades, setGrades] = useState([])\n    const [studentForm, setStudentForm] = useState({})\n\n    const handleCreateStudent = (event) => {\n        event.preventDefault()\n        const copy = { ...studentForm, userId: user.id, studentCode: handleRandomNumber() }\n        copy.gradeId = parseInt(copy.gradeId)\n        studentForm.firstName && studentForm.lastName && studentForm.gradeId ?\n            postStudentToDatabase(copy).then(() => {\n                setCreateStudentToggle(false)\n                handleFetchCalls()\n            }) :\n            window.alert(\"please complete all fields\")\n    }\n\n    const handleCreateFetchCalls = () => {\n        fetchGrades().then((data) => {\n            setGrades(data)\n        })\n    }\n\n    // Generate a random number between 100,000 and 999,999\n    const handleRandomNumber = () => {\n        const min = 1000;\n        const max = 9999;\n        const randomOrderNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n        return randomOrderNumber\n    }\n\n    useEffect(() => {\n        handleCreateFetchCalls()\n    }, [])\n\n    return (\n        <>\n            hi\n        </>\n    )\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,qBAAqB,QAAQ,gCAAgC;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtE,OAAO,MAAMC,aAAa,GAAGA,CAAC;EAAEC,IAAI;EAAEC,mBAAmB;EAAEC,sBAAsB;EAAEC;AAAiB,CAAC,KAAK;EAAAC,EAAA;EAEtG,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElD,MAAMiB,mBAAmB,GAAIC,KAAK,IAAK;IACnCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,MAAMC,IAAI,GAAG;MAAE,GAAGL,WAAW;MAAEM,MAAM,EAAEb,IAAI,CAACc,EAAE;MAAEC,WAAW,EAAEC,kBAAkB,CAAC;IAAE,CAAC;IACnFJ,IAAI,CAACK,OAAO,GAAGC,QAAQ,CAACN,IAAI,CAACK,OAAO,CAAC;IACrCV,WAAW,CAACY,SAAS,IAAIZ,WAAW,CAACa,QAAQ,IAAIb,WAAW,CAACU,OAAO,GAChEvB,qBAAqB,CAACkB,IAAI,CAAC,CAACS,IAAI,CAAC,MAAM;MACnCnB,sBAAsB,CAAC,KAAK,CAAC;MAC7BC,gBAAgB,CAAC,CAAC;IACtB,CAAC,CAAC,GACFmB,MAAM,CAACC,KAAK,CAAC,4BAA4B,CAAC;EAClD,CAAC;EAED,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;IACjC/B,WAAW,CAAC,CAAC,CAAC4B,IAAI,CAAEI,IAAI,IAAK;MACzBnB,SAAS,CAACmB,IAAI,CAAC;IACnB,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMT,kBAAkB,GAAGA,CAAA,KAAM;IAC7B,MAAMU,GAAG,GAAG,IAAI;IAChB,MAAMC,GAAG,GAAG,IAAI;IAChB,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIJ,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;IAC3E,OAAOE,iBAAiB;EAC5B,CAAC;EAEDrC,SAAS,CAAC,MAAM;IACZiC,sBAAsB,CAAC,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI1B,OAAA,CAAAF,SAAA;IAAAoC,QAAA,EAAE;EAEF,gBAAE,CAAC;AAEX,CAAC;AAAA5B,EAAA,CAxCYL,aAAa;AAAAkC,EAAA,GAAblC,aAAa;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}