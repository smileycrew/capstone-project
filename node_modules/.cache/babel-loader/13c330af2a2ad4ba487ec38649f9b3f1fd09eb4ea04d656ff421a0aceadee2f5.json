{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { fetchGrades } from \"./services/gradeServices\";\nimport { postStudentToDatabase } from \"./services/studentServices\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TestCreateStudent = ({\n  user,\n  toggle,\n  setToggle\n}) => {\n  _s();\n  const [grades, setGrades] = useState([]);\n  const [studentForm, setStudentForm] = useState({});\n  const handleCreateStudent = event => {\n    event.preventDefault();\n    const copy = {\n      ...studentForm,\n      userId: user.id,\n      studentCode: handleRandomNumber()\n    };\n    studentForm.firstName && studentForm.lastName && studentForm.gradeId ? postStudentToDatabase(copy).then(() => {\n      setToggle(false);\n    }) : window.alert(\"please complete all fields\");\n  };\n  const handleFetchCalls = () => {\n    fetchGrades().then(data => {\n      setGrades(data);\n    });\n  };\n  const handleRandomNumber = () => {\n    // Generate a random number between 100,000 and 999,999\n    const min = 1000;\n    const max = 9999;\n    const randomOrderNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n    return randomOrderNumber;\n  };\n  const handleStudentInput = event => {\n    const copy = {\n      ...studentForm\n    };\n    const name = event.target.name;\n    const value = event.target.value;\n    copy[name] = value;\n    setStudentForm(copy);\n  };\n  const handleToggle = () => {\n    setToggle(!toggle);\n    setStudentForm({});\n  };\n  useEffect(() => {\n    handleFetchCalls();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"hello\"\n  }, void 0, false);\n};\n_s(TestCreateStudent, \"eU9IvGYRMTVY93qTZUZmJasbFLk=\");\n_c = TestCreateStudent;\nvar _c;\n$RefreshReg$(_c, \"TestCreateStudent\");","map":{"version":3,"names":["useEffect","useState","fetchGrades","postStudentToDatabase","Fragment","_Fragment","jsxDEV","_jsxDEV","TestCreateStudent","user","toggle","setToggle","_s","grades","setGrades","studentForm","setStudentForm","handleCreateStudent","event","preventDefault","copy","userId","id","studentCode","handleRandomNumber","firstName","lastName","gradeId","then","window","alert","handleFetchCalls","data","min","max","randomOrderNumber","Math","floor","random","handleStudentInput","name","target","value","handleToggle","children","_c","$RefreshReg$"],"sources":["/Users/edwin.moz/workspace/capstone-project/src/TestCreateStudent.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { fetchGrades } from \"./services/gradeServices\"\nimport { postStudentToDatabase } from \"./services/studentServices\"\n\nexport const TestCreateStudent = ({ user, toggle, setToggle }) => {\n\n    const [grades, setGrades] = useState([])\n    const [studentForm, setStudentForm] = useState({})\n\n    const handleCreateStudent = (event) => {\n        event.preventDefault()\n        const copy = { ...studentForm, userId: user.id, studentCode: handleRandomNumber() }\n        studentForm.firstName && studentForm.lastName && studentForm.gradeId ?\n            postStudentToDatabase(copy).then(() => {\n                setToggle(false)\n            }) :\n            window.alert(\"please complete all fields\")\n    }\n\n    const handleFetchCalls = () => {\n        fetchGrades().then((data) => {\n            setGrades(data)\n        })\n    }\n\n    const handleRandomNumber = () => {\n        // Generate a random number between 100,000 and 999,999\n        const min = 1000;\n        const max = 9999;\n        const randomOrderNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n        return randomOrderNumber\n    }\n\n    const handleStudentInput = (event) => {\n        const copy = { ...studentForm }\n        const name = event.target.name\n        const value = event.target.value\n        copy[name] = value\n        setStudentForm(copy)\n    }\n\n    const handleToggle = () => {\n        setToggle(!toggle)\n        setStudentForm({})\n    }\n\n    useEffect(() => {\n        handleFetchCalls()\n    }, [])\n\n    return (\n        <>\n        hello\n            {/* <button onClick={handleToggle}>button</button>\n            {toggle ?\n                <div className=\"relative z-10\" aria-labelledby=\"slide-over-title\" role=\"dialog\" aria-modal=\"true\">\n                    <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"></div>\n                    <div className=\"fixed inset-0 overflow-hidden\">\n                        <div className=\"absolute inset-0 overflow-hidden\">\n                            <div className=\"pointer-events-none fixed inset-y-0 right-0 flex max-w-full pl-10\">\n                                <div className=\"pointer-events-auto w-screen max-w-md\">\n                                    <div className=\"flex h-full flex-col overflow-y-scroll bg-white shadow-xl\">\n                                        <div className=\"flex-1 overflow-y-auto px-4 py-6 sm:px-6\">\n                                            <div className=\"flex items-start justify-between\">\n                                                <b className=\"text-lg font-medium text-gray-900\" id=\"slide-over-title\"></b>\n                                                <div className=\"ml-3 flex h-7 items-center\">\n                                                    <button onClick={handleToggle} type=\"button\" className=\"relative -m-2 p-2 text-gray-400 hover:text-gray-500\">\n                                                        <span className=\"absolute -inset-0.5\"></span>\n                                                        <span className=\"sr-only\">Close panel</span>\n                                                        <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" aria-hidden=\"true\">\n                                                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\n                                                        </svg>\n                                                    </button>\n                                                </div>\n                                            </div>\n                                            <div\n                                                className=\"flex mx-auto max-w-7xl px- sm:px-6 lg:px-8 relative h-16 items-center justify-center gap-10 pt-10\">\n                                                <img\n                                                    className=\"text-center h-32 w-32 rounded-full\"\n                                                    src={`https://api.dicebear.com/7.x/big-smile/svg?seed=${studentForm.firstName}`}\n                                                    alt=\"\" />\n                                                <section\n                                                    className=\"sm:col-span-3\">\n\n                                                    <label\n                                                        className=\"block text-sm font-medium leading-6 text-gray-900\">\n                                                        Grades\n                                                        <select\n                                                            className=\"mt-2 block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6\"\n                                                            name=\"gradeId\"\n                                                            onChange={handleStudentInput}\n                                                            required>\n                                                            <option>\n                                                                select a grade\n                                                            </option>\n                                                            {grades.map((grade) => {\n                                                                return (\n                                                                    <option\n                                                                        key={grade.id}\n                                                                        value={grade.id}>\n                                                                        {grade.grade}\n                                                                    </option>\n                                                                )\n                                                            })}\n                                                        </select>\n                                                    </label>\n                                                </section>\n                                            </div>\n                                            <div className=\"mt-8\">\n                                                <div className=\"flow-root\">\n                                                    <form\n                                                        className=\"space-y-6\"\n                                                        onSubmit={\"handleRegisterUser\"}>\n                                                        <fieldset>\n                                                            <p\n                                                                className=\"block text-sm font-medium leading-6 text-gray-900\">\n                                                                First Name\n                                                            </p>\n                                                            <input\n                                                                className=\"mt-2 text-center block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                                                                autoComplete=\"first name\"\n                                                                id=\"firstName\"\n                                                                onChange={handleStudentInput}\n                                                                name=\"firstName\"\n                                                                placeholder=\"Enter your first name\"\n                                                                required\n                                                                type=\"text\" />\n                                                        </fieldset>\n                                                        <fieldset>\n                                                            <label\n                                                                className=\"block text-sm font-medium leading-6 text-gray-900\">\n                                                                Last Name\n                                                            </label>\n                                                            <input\n                                                                className=\"mt-2 text-center block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                                                                id=\"lastName\"\n                                                                onChange={handleStudentInput}\n                                                                name=\"lastName\"\n                                                                placeholder=\"Enter your last name\"\n                                                                required\n                                                                type=\"text\" />\n                                                        </fieldset>\n\n                                                        <div className=\"sm:col-span-4\">\n                                                            <label htmlFor=\"username\" className=\"block text-sm font-medium leading-6 text-gray-900\">Username</label>\n                                                            <div className=\"flex mt-2 rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 sm:max-w-md\">\n                                                            </div>\n                                                        </div>\n                                                        <div>\n                                                            <button\n                                                                type=\"submit\"\n                                                                className=\"flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n                                                                onClick={handleCreateStudent}>\n                                                                Create Student\n                                                            </button>\n                                                        </div>\n                                                    </form>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div> :\n                null\n            } */}\n        </>\n    )\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,qBAAqB,QAAQ,4BAA4B;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,IAAI;EAAEC,MAAM;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAE9D,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElD,MAAMgB,mBAAmB,GAAIC,KAAK,IAAK;IACnCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,MAAMC,IAAI,GAAG;MAAE,GAAGL,WAAW;MAAEM,MAAM,EAAEZ,IAAI,CAACa,EAAE;MAAEC,WAAW,EAAEC,kBAAkB,CAAC;IAAE,CAAC;IACnFT,WAAW,CAACU,SAAS,IAAIV,WAAW,CAACW,QAAQ,IAAIX,WAAW,CAACY,OAAO,GAChExB,qBAAqB,CAACiB,IAAI,CAAC,CAACQ,IAAI,CAAC,MAAM;MACnCjB,SAAS,CAAC,KAAK,CAAC;IACpB,CAAC,CAAC,GACFkB,MAAM,CAACC,KAAK,CAAC,4BAA4B,CAAC;EAClD,CAAC;EAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC3B7B,WAAW,CAAC,CAAC,CAAC0B,IAAI,CAAEI,IAAI,IAAK;MACzBlB,SAAS,CAACkB,IAAI,CAAC;IACnB,CAAC,CAAC;EACN,CAAC;EAED,MAAMR,kBAAkB,GAAGA,CAAA,KAAM;IAC7B;IACA,MAAMS,GAAG,GAAG,IAAI;IAChB,MAAMC,GAAG,GAAG,IAAI;IAChB,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIJ,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;IAC3E,OAAOE,iBAAiB;EAC5B,CAAC;EAED,MAAMI,kBAAkB,GAAIrB,KAAK,IAAK;IAClC,MAAME,IAAI,GAAG;MAAE,GAAGL;IAAY,CAAC;IAC/B,MAAMyB,IAAI,GAAGtB,KAAK,CAACuB,MAAM,CAACD,IAAI;IAC9B,MAAME,KAAK,GAAGxB,KAAK,CAACuB,MAAM,CAACC,KAAK;IAChCtB,IAAI,CAACoB,IAAI,CAAC,GAAGE,KAAK;IAClB1B,cAAc,CAACI,IAAI,CAAC;EACxB,CAAC;EAED,MAAMuB,YAAY,GAAGA,CAAA,KAAM;IACvBhC,SAAS,CAAC,CAACD,MAAM,CAAC;IAClBM,cAAc,CAAC,CAAC,CAAC,CAAC;EACtB,CAAC;EAEDhB,SAAS,CAAC,MAAM;IACZ+B,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIxB,OAAA,CAAAF,SAAA;IAAAuC,QAAA,EAAE;EAEE,gBAmHF,CAAC;AAEX,CAAC;AAAAhC,EAAA,CAtKYJ,iBAAiB;AAAAqC,EAAA,GAAjBrC,iBAAiB;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}